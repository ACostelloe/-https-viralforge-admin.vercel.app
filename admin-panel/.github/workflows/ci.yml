name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: admin-panel/package-lock.json
        
    - name: Install dependencies
      working-directory: ./admin-panel
      run: npm ci
      
    - name: Run linting
      working-directory: ./admin-panel
      run: npm run lint
      
    - name: Run type checking
      working-directory: ./admin-panel
      run: npm run type-check
      
    - name: Run unit tests
      working-directory: ./admin-panel
      run: npm run test:ci
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./admin-panel/coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        
  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: admin-panel/package-lock.json
        
    - name: Install dependencies
      working-directory: ./admin-panel
      run: npm ci
      
    - name: Build application
      working-directory: ./admin-panel
      run: npm run build
      
    - name: Run E2E tests
      working-directory: ./admin-panel
      run: npm run test:integration
      
    - name: Upload E2E artifacts
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: cypress-screenshots
        path: admin-panel/cypress/screenshots
        
  build:
    name: Build & Deploy
    runs-on: ubuntu-latest
    needs: [test, e2e]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: admin-panel/package-lock.json
        
    - name: Install dependencies
      working-directory: ./admin-panel
      run: npm ci
      
    - name: Build for production
      working-directory: ./admin-panel
      run: npm run build:prod
      env:
        VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL }}
        VITE_OPENAI_API_KEY: ${{ secrets.VITE_OPENAI_API_KEY }}
        VITE_TWITTER_API_KEY: ${{ secrets.VITE_TWITTER_API_KEY }}
        VITE_TWITTER_API_SECRET: ${{ secrets.VITE_TWITTER_API_SECRET }}
        VITE_INSTAGRAM_CLIENT_ID: ${{ secrets.VITE_INSTAGRAM_CLIENT_ID }}
        VITE_INSTAGRAM_CLIENT_SECRET: ${{ secrets.VITE_INSTAGRAM_CLIENT_SECRET }}
        VITE_FACEBOOK_APP_ID: ${{ secrets.VITE_FACEBOOK_APP_ID }}
        VITE_FACEBOOK_APP_SECRET: ${{ secrets.VITE_FACEBOOK_APP_SECRET }}
        VITE_LINKEDIN_CLIENT_ID: ${{ secrets.VITE_LINKEDIN_CLIENT_ID }}
        VITE_LINKEDIN_CLIENT_SECRET: ${{ secrets.VITE_LINKEDIN_CLIENT_SECRET }}
        VITE_SENTRY_DSN: ${{ secrets.VITE_SENTRY_DSN }}
        VITE_GOOGLE_ANALYTICS_ID: ${{ secrets.VITE_GOOGLE_ANALYTICS_ID }}
        
    - name: Run bundle analyzer
      working-directory: ./admin-panel
      run: npm run analyze
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: admin-panel/dist
        
    - name: Deploy to staging
      if: github.ref == 'refs/heads/develop'
      run: |
        echo "Deploying to staging environment"
        # Add your staging deployment commands here
        
    - name: Deploy to production
      if: github.ref == 'refs/heads/main'
      run: |
        echo "Deploying to production environment"
        # Add your production deployment commands here
        
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: admin-panel/package-lock.json
        
    - name: Install dependencies
      working-directory: ./admin-panel
      run: npm ci
      
    - name: Run security audit
      working-directory: ./admin-panel
      run: npm audit --audit-level high
      
    - name: Run dependency check
      uses: actions/dependency-review-action@v3
      if: github.event_name == 'pull_request'
      
  lighthouse:
    name: Lighthouse CI
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: admin-panel/package-lock.json
        
    - name: Install dependencies
      working-directory: ./admin-panel
      run: npm ci
      
    - name: Build application
      working-directory: ./admin-panel
      run: npm run build
      
    - name: Run Lighthouse CI
      working-directory: ./admin-panel
      run: |
        npm install -g @lhci/cli@0.12.x
        lhci autorun
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }} 